User input
 |
 |
 Class Main
 |
 |
 a string
 |
 |
 Class Parse
 |
 |
 regular expression --> primary decide the form --> primary parse the string
 |
 |
 further parsing, use the parssed title type word to decide
 i need to add some more parse tech, formal pass to every token



Primitives data structure

                    Primitives Interface
                           |
                           |

TableName                ColName               Operable
                                                  |
                                                  |
                                     String    Int   Float   NoValue   NAN



Container

relation: the container has-a Operable



TableName :
1. only when fit the pattern will initiate a Table name, a TableName will decide the instance itself
2. Tablename will have its own type "_TABLENAME"


ColName :
1. only when fit the colname pattern (X int/string/float)
2. Colname will have its own type "_COLNAME", also have a Coltype to cast the corresponding row of containers
   only the containees in the container share the same type can be fit in
3. Colname have two types of names, one is the complete name (the getValue() method)
                                    two is the partial name (only the first part, not include the coltype)
4. Colname have operations, this will be its rows of containers to do the operation


Container :
1. has coltype, decede by pass-in parameters
2. only the value of its containee fit the patter, and fit the coltype can be stored in
3. a operation between two conainer is the operation of two containees, the compile type will be Operable (to
    avoid the annoying generic proble)
4. a operation betwwen a container and single literal will be transfered to operation between two containers (the
    single literal will be created its container with it's type as the container's coltype)


Operable :
1. subclass is string, float, int, novalue and nan


Special value -- Novalue :
1. the tricky of novalue is the operation,